name: Build and Deploy API to Azure Container APpp

# trigger
on:
  push:
    branches:
      - develop

# workflow 1, build, create and push image to registry ACR    
jobs:
  build-create-push-to-ACR:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.set_sha.outputs.sha }}  # for workflow 2 use
      projectname: ${{ steps.project_name.outputs.project_name }}
    steps:
      - name: Checkout repository
        id: github
        uses: actions/checkout@v3
        
      - name: Setup WebApi .NET on VM
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'
          
      - name: Configure Azure ACR
        uses: azure/docker-login@v2
        with:
          login-server: ${{ vars.ACR_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Set SHA Output
        id: set_sha
        run: echo "sha=$(echo ${{ github.sha }} )" >> $GITHUB_OUTPUT

      - name: Use SHA Output
        run: echo "The commit SHA is ${{ steps.set_sha.outputs.sha }}"

      - name: Get Project Name from Directory
        id: project_name
        run: |
            PROJECT_NAME=$(basename $PWD)
            echo "project_name=$PROJECT_NAME"  | tr '[:upper:]' '[:lower:]' >> $GITHUB_OUTPUT

      - name: Print Project Name
        run: echo "The project name is ${{ steps.project_name.outputs.project_name }}"

      - name: Create docker image  and push it  to ACR
        env:
          IMAGE_NAME: ${{ vars.ACR_SERVER }}
          TAG_NAME: ${{ steps.set_sha.outputs.sha }}
          PROJECT_NAME: ${{ steps.project_name.outputs.project_name }}
        run: |
          echo $IMAGE_NAME/$PROJECT_NAME:$TAG_NAME
          echo "$IMAGE_NAME/$PROJECT_NAME:$TAG_NAME"
          docker build -f GardenManagement/Dockerfile  -t $IMAGE_NAME/$PROJECT_NAME:latest -t $IMAGE_NAME/$PROJECT_NAME:$TAG_NAME  .
          docker push $IMAGE_NAME/$PROJECT_NAME --all-tags

# workflow 2, wait for workflow 1 to complete. Deploy the container to Azure Container App 
  deploy-container-to-ACA:
    runs-on: ubuntu-latest
    needs: build-create-push-to-ACR  # to stop running workflow 2 paralley
    
    steps:
      - name: Login to Azure using service principal
        uses: azure/login@v1
        with:
          creds: ${{ secrets.SERVICE_PRINCIPAL }}

      - name: DBConnection string
        run: echo The commit SHA is ${{ vars.DBCONNECTION_STRING1 }}
          
      - name: build and deploy to ACA
        uses: azure/container-apps-deploy-action@v1
        env:
          IMAGE_TAG: ${{ needs.build-create-push-to-ACR.outputs.sha }}
          PROJECT_NAME: ${{ needs.build-create-push-to-ACR.outputs.projectname }}
          ACR_SERVER: ${{ vars.ACR_SERVER }}
          DBCONNECTION: ${{ vars.DBCONNECTION_STRING1 }}
        with:
          imageToDeploy: $ACR_SERVER/$PROJECT_NAME:$IMAGE_TAG
          resourceGroup: gardenmanagement-rg-v2
          registryUrl: ${{ vars.ACR_SERVER }}
          targetPort: 8080
          ingress: external
          containerAppName: g-containerapp-dev
          containerAppEnvironment: g-containerappenv-dev
          environmentVariables: |# for swagger 
            ASPNETCORE_ENVIRONMENT=Development ASPNETCORE_URLS=http://+:8080 ConnectionStrings__GardenDbConnectionString=$DBCONNECTION